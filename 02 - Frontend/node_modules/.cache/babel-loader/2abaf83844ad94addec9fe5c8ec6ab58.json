{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noamc\\\\OneDrive\\\\\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4\\\\01 - Northwind Full Stack\\\\02 - Frontend\\\\src\\\\Components\\\\HomeArea\\\\Suggestions\\\\Suggestions.tsx\";\nimport { Component } from \"react\";\nimport \"./Suggestions.css\"; // Props interface: \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Suggestions extends Component {\n  // constructor - initializing the state (must not perform side-effects): \n  constructor(props) {\n    super(props); // Init the state: \n\n    this.makeSuggestion = () => {\n      // Change state: \n      this.setState({\n        suggestion: \"Cranberries\"\n      });\n    };\n\n    this.state = {\n      suggestion: \"---\"\n    };\n  } // Lifecycle Hooks - can perform side-effects: \n  // useEffect which runs only once: \n\n\n  componentDidMount() {// ...\n  } // useEffect which runs on any update: \n\n\n  componentDidUpdate(prevProps, prevState, snapshot) {// ...\n  } // useEffect which runs when component destroyed: \n\n\n  componentWillUnmount() {// ...\n  } // Event callback: \n\n\n  // render - returns the HTML of the component (must not perform side-effects):\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Suggestions Box\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [this.props.header, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.makeSuggestion,\n          children: \"Suggest Product\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Suggestion: \", this.state.suggestion]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Suggestions;","map":{"version":3,"sources":["C:/Users/noamc/OneDrive/שולחן העבודה/01 - Northwind Full Stack/02 - Frontend/src/Components/HomeArea/Suggestions/Suggestions.tsx"],"names":["Component","Suggestions","constructor","props","makeSuggestion","setState","suggestion","state","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","componentWillUnmount","render","header"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,mBAAP,C,CAEA;;;;AAUA,MAAMC,WAAN,SAA0BD,SAA1B,CAAwE;AAEpE;AACOE,EAAAA,WAAW,CAACC,KAAD,EAA0B;AACxC,UAAMA,KAAN,EADwC,CAGxC;;AAHwC,SA2BpCC,cA3BoC,GA2BnB,MAAM;AAE3B;AACA,WAAKC,QAAL,CAAc;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAd;AACH,KA/B2C;;AAIxC,SAAKC,KAAL,GAAa;AAClBD,MAAAA,UAAU,EAAE;AADM,KAAb;AAGH,GAVmE,CAYpE;AAEA;;;AACOE,EAAAA,iBAAiB,GAAS,CAC7B;AACH,GAjBmE,CAmBpE;;;AACOC,EAAAA,kBAAkB,CAACC,SAAD,EAAwCC,SAAxC,EAA+EC,QAA/E,EAAqG,CAC1H;AACH,GAtBmE,CAwBpE;;;AACOC,EAAAA,oBAAoB,GAAS,CAChC;AACH,GA3BmE,CA6BpE;;;AAOA;AACOC,EAAAA,MAAM,GAAgB;AAEzB,wBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,6BACR;AAAA,mBAEkB,KAAKX,KAAL,CAAWY,MAF7B,eAMgB;AAAQ,UAAA,OAAO,EAAE,KAAKX,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANhB,eASgB;AAAA,qCAAoB,KAAKG,KAAL,CAAWD,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAThB;AAAA;AAAA;AAAA;AAAA;AAAA;AADQ;AAAA;AAAA;AAAA;AAAA,YADJ;AAeH;;AAtDmE;;AAyDxE,eAAeL,WAAf","sourcesContent":["import { Component } from \"react\";\nimport \"./Suggestions.css\";\n\n// Props interface: \ninterface SuggestionsProps {\n\theader: string;\n}\n\n// State interface: \ninterface SuggestionsState {\n\tsuggestion: string;\n}\n\nclass Suggestions extends Component<SuggestionsProps, SuggestionsState> {\n\n    // constructor - initializing the state (must not perform side-effects): \n    public constructor(props: SuggestionsProps) {\n        super(props);\n\n        // Init the state: \n        this.state = {\n\t\t\tsuggestion: \"---\"\n        };\n    }\n\n    // Lifecycle Hooks - can perform side-effects: \n\n    // useEffect which runs only once: \n    public componentDidMount(): void {\n        // ...\n    }\n\n    // useEffect which runs on any update: \n    public componentDidUpdate(prevProps: Readonly<SuggestionsProps>, prevState: Readonly<SuggestionsState>, snapshot?: any): void {\n        // ...\n    }\n\n    // useEffect which runs when component destroyed: \n    public componentWillUnmount(): void {\n        // ...\n    }\n\n    // Event callback: \n    private makeSuggestion = () => {\n\n        // Change state: \n        this.setState({ suggestion: \"Cranberries\" });\n    }\n\n    // render - returns the HTML of the component (must not perform side-effects):\n    public render(): JSX.Element {\n\n        return (\n            <div className=\"Suggestions Box\">\n\t\t\t\t<p>\n                    {/* Display props:  */}\n                    { this.props.header }\n\n                    {/* Call event:  */}\n                    {/* <button onClick={this.makeSuggestion.bind(this)}>Suggest Product</button> */}\n                    <button onClick={this.makeSuggestion}>Suggest Product</button>\n\n                    {/* Display state:  */}\n                    <span>Suggestion: { this.state.suggestion }</span>\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default Suggestions;\n"]},"metadata":{},"sourceType":"module"}