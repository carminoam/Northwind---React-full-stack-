{"ast":null,"code":"import jwtDecode from \"jwt-decode\";\n// State\nexport class AuthState {\n  constructor() {\n    this.user = null;\n    this.token = null;\n    this.token = localStorage.getItem(\"token\");\n\n    if (this.token) {\n      const encodedObject = jwtDecode(this.token);\n      this.user = encodedObject.user;\n    }\n  }\n\n} // Action Type\n\nexport let AuthActionType; // Action\n\n(function (AuthActionType) {\n  AuthActionType[\"Register\"] = \"Register\";\n  AuthActionType[\"Login\"] = \"Login\";\n  AuthActionType[\"Logout\"] = \"Logout\";\n})(AuthActionType || (AuthActionType = {}));\n\n// Action Creators: \nexport function registerAction(token) {\n  return {\n    type: AuthActionType.Register,\n    payload: token\n  };\n}\nexport function loginAction(token) {\n  return {\n    type: AuthActionType.Login,\n    payload: token\n  };\n}\nexport function logoutAction() {\n  return {\n    type: AuthActionType.Logout\n  };\n} // Reducer: \n\nexport function authReducer() {\n  let currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = { ...currentState\n  };\n\n  switch (action.type) {\n    case AuthActionType.Register:\n    case AuthActionType.Login:\n      newState.token = action.payload; // Here the payload is the token sent from the backend.\n\n      const encodedObject = jwtDecode(newState.token); // Convert to any for getting the inside \"user\" object.\n\n      newState.user = encodedObject.user;\n      localStorage.setItem(\"token\", newState.token);\n      break;\n\n    case AuthActionType.Logout:\n      newState.token = null;\n      newState.user = null;\n      localStorage.removeItem(\"token\");\n      break;\n  }\n\n  return newState;\n}","map":{"version":3,"sources":["C:/Users/noamc/OneDrive/שולחן העבודה/01 - Northwind Full Stack/02 - Frontend/src/Redux/AuthState.ts"],"names":["jwtDecode","AuthState","constructor","user","token","localStorage","getItem","encodedObject","AuthActionType","registerAction","type","Register","payload","loginAction","Login","logoutAction","Logout","authReducer","currentState","action","newState","setItem","removeItem"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAGA;AACA,OAAO,MAAMC,SAAN,CAAgB;AAKZC,EAAAA,WAAW,GAAG;AAAA,SAHdC,IAGc,GAHI,IAGJ;AAAA,SAFdC,KAEc,GAFE,IAEF;AACjB,SAAKA,KAAL,GAAaC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAb;;AACA,QAAG,KAAKF,KAAR,EAAe;AACX,YAAMG,aAAkB,GAAGP,SAAS,CAAC,KAAKI,KAAN,CAApC;AACA,WAAKD,IAAL,GAAYI,aAAa,CAACJ,IAA1B;AACH;AACJ;;AAXkB,C,CAevB;;AACA,WAAYK,cAAZ,C,CAMA;;WANYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AAYZ;AACA,OAAO,SAASC,cAAT,CAAwBL,KAAxB,EAAmD;AACtD,SAAO;AAAEM,IAAAA,IAAI,EAAEF,cAAc,CAACG,QAAvB;AAAiCC,IAAAA,OAAO,EAAER;AAA1C,GAAP;AACH;AACD,OAAO,SAASS,WAAT,CAAqBT,KAArB,EAAgD;AACnD,SAAO;AAAEM,IAAAA,IAAI,EAAEF,cAAc,CAACM,KAAvB;AAA8BF,IAAAA,OAAO,EAAER;AAAvC,GAAP;AACH;AACD,OAAO,SAASW,YAAT,GAAoC;AACvC,SAAO;AAAEL,IAAAA,IAAI,EAAEF,cAAc,CAACQ;AAAvB,GAAP;AACH,C,CAED;;AACA,OAAO,SAASC,WAAT,GAAoF;AAAA,MAA/DC,YAA+D,uEAAhD,IAAIjB,SAAJ,EAAgD;AAAA,MAA/BkB,MAA+B;AAEvF,QAAMC,QAAQ,GAAG,EAAE,GAAGF;AAAL,GAAjB;;AAEA,UAAQC,MAAM,CAACT,IAAf;AACI,SAAKF,cAAc,CAACG,QAApB;AACA,SAAKH,cAAc,CAACM,KAApB;AACIM,MAAAA,QAAQ,CAAChB,KAAT,GAAiBe,MAAM,CAACP,OAAxB,CADJ,CACqC;;AACjC,YAAML,aAAkB,GAAGP,SAAS,CAACoB,QAAQ,CAAChB,KAAV,CAApC,CAFJ,CAE0D;;AACtDgB,MAAAA,QAAQ,CAACjB,IAAT,GAAgBI,aAAa,CAACJ,IAA9B;AACAE,MAAAA,YAAY,CAACgB,OAAb,CAAqB,OAArB,EAA8BD,QAAQ,CAAChB,KAAvC;AACA;;AACJ,SAAKI,cAAc,CAACQ,MAApB;AACII,MAAAA,QAAQ,CAAChB,KAAT,GAAiB,IAAjB;AACAgB,MAAAA,QAAQ,CAACjB,IAAT,GAAgB,IAAhB;AACAE,MAAAA,YAAY,CAACiB,UAAb,CAAwB,OAAxB;AACA;AAZR;;AAeA,SAAOF,QAAP;AACH","sourcesContent":["import jwtDecode from \"jwt-decode\";\r\nimport UserModel from \"../Models/UserModel\";\r\n\r\n// State\r\nexport class AuthState {\r\n\r\n    public user: UserModel = null;\r\n    public token: string = null;\r\n\r\n    public constructor() {\r\n        this.token = localStorage.getItem(\"token\");\r\n        if(this.token) {\r\n            const encodedObject: any = jwtDecode(this.token);\r\n            this.user = encodedObject.user;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n// Action Type\r\nexport enum AuthActionType {\r\n    Register = \"Register\",\r\n    Login = \"Login\",\r\n    Logout = \"Logout\"\r\n}\r\n\r\n// Action\r\nexport interface AuthAction {\r\n    type: AuthActionType;\r\n    payload?: string; // Optional (on Logout we don't need to supply a payload)\r\n}\r\n\r\n// Action Creators: \r\nexport function registerAction(token: string): AuthAction {\r\n    return { type: AuthActionType.Register, payload: token };\r\n}\r\nexport function loginAction(token: string): AuthAction {\r\n    return { type: AuthActionType.Login, payload: token };\r\n}\r\nexport function logoutAction(): AuthAction {\r\n    return { type: AuthActionType.Logout };\r\n}\r\n\r\n// Reducer: \r\nexport function authReducer(currentState = new AuthState(), action: AuthAction): AuthState {\r\n\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case AuthActionType.Register:\r\n        case AuthActionType.Login:\r\n            newState.token = action.payload; // Here the payload is the token sent from the backend.\r\n            const encodedObject: any = jwtDecode(newState.token); // Convert to any for getting the inside \"user\" object.\r\n            newState.user = encodedObject.user;\r\n            localStorage.setItem(\"token\", newState.token);\r\n            break;\r\n        case AuthActionType.Logout:\r\n            newState.token = null;\r\n            newState.user = null;\r\n            localStorage.removeItem(\"token\");\r\n            break;\r\n    }\r\n\r\n    return newState;\r\n}"]},"metadata":{},"sourceType":"module"}