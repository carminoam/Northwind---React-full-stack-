{"ast":null,"code":"import axios from \"axios\";\nimport { addProductAction, deleteProductAction, fetchProductsAction, updateProductAction } from \"../Redux/ProductsState\";\nimport store from \"../Redux/Store\";\nimport config from \"../Utils/Config\";\n\nclass ProductsService {\n  async fetchProducts() {\n    if (store.getState().productsState.products.length === 0) {\n      const response = await axios.get(config.productsUrl);\n      const products = response.data;\n      store.dispatch(fetchProductsAction(products));\n    }\n\n    return store.getState().productsState.products;\n  }\n\n  async getOneProduct(id) {\n    let product = store.getState().productsState.products.find(p => p.id === id);\n\n    if (!product) {\n      const response = await axios.get(config.productsUrl + id);\n      product = response.data;\n    }\n\n    return product;\n  }\n\n  async deleteOneProduct(id) {\n    await axios.delete(config.productsUrl + id);\n    store.dispatch(deleteProductAction(id));\n  }\n\n  async addNewProduct(product) {\n    // Convert out product to FormData:\n    const formData = new FormData();\n    formData.append(\"name\", product.name);\n    formData.append(\"price\", product.price.toString());\n    formData.append(\"stock\", product.stock.toString());\n    formData.append(\"image\", product.image.item(0)); // Post the new product to the server: \n\n    const response = await axios.post(config.productsUrl, formData);\n    const addedProduct = response.data; // Add to redux global state: \n\n    store.dispatch(addProductAction(addedProduct));\n    return addedProduct;\n  }\n\n  async updateProduct(product) {\n    // Convert out product to FormData:\n    const formData = new FormData();\n    formData.append(\"name\", product.name);\n    formData.append(\"price\", product.price.toString());\n    formData.append(\"stock\", product.stock.toString());\n    formData.append(\"image\", product.image.item(0)); // Put the new product to the server: \n\n    const response = await axios.put(config.productsUrl + product.id, formData);\n    const updatedProduct = response.data; // Add to redux global state: \n\n    store.dispatch(updateProductAction(updatedProduct));\n    return updatedProduct;\n  }\n\n}\n\nconst productsService = new ProductsService();\nexport default productsService;","map":{"version":3,"sources":["C:/Users/noamc/OneDrive/שולחן העבודה/01 - Northwind Full Stack/02 - Frontend/src/Services/ProductsService.ts"],"names":["axios","addProductAction","deleteProductAction","fetchProductsAction","updateProductAction","store","config","ProductsService","fetchProducts","getState","productsState","products","length","response","get","productsUrl","data","dispatch","getOneProduct","id","product","find","p","deleteOneProduct","delete","addNewProduct","formData","FormData","append","name","price","toString","stock","image","item","post","addedProduct","updateProduct","put","updatedProduct","productsService"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport ProductModel from \"../Models/ProductModel\";\r\nimport { addProductAction, deleteProductAction, fetchProductsAction, updateProductAction } from \"../Redux/ProductsState\";\r\nimport store from \"../Redux/Store\";\r\nimport config from \"../Utils/Config\";\r\n\r\nclass ProductsService {\r\n\r\n    public async fetchProducts(): Promise<ProductModel[]> {\r\n        if(store.getState().productsState.products.length === 0) {\r\n            const response = await axios.get<ProductModel[]>(config.productsUrl);\r\n            const products = response.data;\r\n            store.dispatch(fetchProductsAction(products));\r\n        }\r\n        return store.getState().productsState.products;\r\n    }\r\n\r\n    public async getOneProduct(id: number): Promise<ProductModel> {\r\n        let product = store.getState().productsState.products.find(p => p.id === id);\r\n        if(!product) {\r\n            const response = await axios.get<ProductModel>(config.productsUrl + id);\r\n            product = response.data;\r\n        }\r\n        return product;\r\n    }\r\n\r\n    public async deleteOneProduct(id: number): Promise<void> {\r\n        await axios.delete(config.productsUrl + id);\r\n        store.dispatch(deleteProductAction(id));\r\n    }\r\n\r\n    public async addNewProduct(product: ProductModel): Promise<ProductModel> {\r\n\r\n        // Convert out product to FormData:\r\n        const formData = new FormData();\r\n        formData.append(\"name\", product.name);\r\n        formData.append(\"price\", product.price.toString());\r\n        formData.append(\"stock\", product.stock.toString());\r\n        formData.append(\"image\", product.image.item(0));\r\n\r\n        // Post the new product to the server: \r\n        const response = await axios.post<ProductModel>(config.productsUrl, formData);\r\n        const addedProduct = response.data;\r\n\r\n        // Add to redux global state: \r\n        store.dispatch(addProductAction(addedProduct));\r\n\r\n        return addedProduct;\r\n    }\r\n\r\n    public async updateProduct(product: ProductModel): Promise<ProductModel> {\r\n\r\n        // Convert out product to FormData:\r\n        const formData = new FormData();\r\n        formData.append(\"name\", product.name);\r\n        formData.append(\"price\", product.price.toString());\r\n        formData.append(\"stock\", product.stock.toString());\r\n        formData.append(\"image\", product.image.item(0));\r\n\r\n        // Put the new product to the server: \r\n        const response = await axios.put<ProductModel>(config.productsUrl + product.id, formData);\r\n        const updatedProduct = response.data;\r\n\r\n        // Add to redux global state: \r\n        store.dispatch(updateProductAction(updatedProduct));\r\n\r\n        return updatedProduct;\r\n    }\r\n    \r\n}\r\n\r\nconst productsService = new ProductsService();\r\n\r\nexport default productsService;"]},"metadata":{},"sourceType":"module"}